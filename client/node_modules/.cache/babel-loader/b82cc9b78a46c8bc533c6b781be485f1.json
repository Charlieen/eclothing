{"ast":null,"code":"import firebase from 'firebase';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { config } from '../api/firebase';\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; //  console.log(userAuth);\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // console.log(!snapShot.exists);\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); //  console.log(displayName,email,createdAt);\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  console.log('userRef ', userRef);\n  console.log('snapShot ', snapShot);\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // collectionRef.add(objectsToAdd);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/dzgygmdhx/work/react-course/ecloth/src/firebase/firebase.util.js"],"names":["firebase","config","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AACA,SAAQC,MAAR,QAAqB,iBAArB;AAGAD,QAAQ,CAACE,aAAT,CAAuBD,MAAvB;AAEA,OAAO,MAAME,yBAAyB,GAAG,OAAOC,QAAP,EAAgBC,cAAhB,KAAmC;AACxE,MAAG,CAACD,QAAJ,EAAc,OAD0D,CAE1E;;AACE,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CALwE,CASzE;;AAEC,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAoB;AAChB,UAAM;AAACC,MAAAA,WAAD;AAAaC,MAAAA;AAAb,QAAsBV,QAA5B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB,CAFgB,CAIlB;;AAEM,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOE,OAAOa,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACH;AACR;;AAEDF,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBd,OAAvB;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBV,QAAxB;AACA,SAAOJ,OAAP;AACH,CAhCM;AAiCP,OAAO,MAAMgB,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,YAAtB,KAAqC;AAE1E,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB,CAF0E,CAG1E;;AACA,QAAMI,KAAK,GAAIpB,SAAS,CAACoB,KAAV,EAAf;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV,EAAoBD,GAApB;AACH,GAHD;AAID,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AAEF,CAXM;AAaP,OAAO,MAAMC,IAAI,GAAGhC,QAAQ,CAACgC,IAAT,EAAb;AACP,OAAO,MAAMzB,SAAS,GAAGP,QAAQ,CAACO,SAAT,EAAlB;AAEP,MAAM0B,QAAQ,GAAG,IAAIjC,QAAQ,CAACgC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAOC,gBAAgB,GAAG,MAAKL,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAIP,eAAejC,QAAf","sourcesContent":["import firebase from 'firebase';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport {config} from '../api/firebase';\n\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth,additionalData) => {\n    if(!userAuth) return;\n  //  console.log(userAuth);\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    const snapShot = await userRef.get();\n\n\n\n   // console.log(!snapShot.exists);\n\n    if(!snapShot.exists){\n        const {displayName,email} = userAuth;\n        const createdAt = new Date();\n\n      //  console.log(displayName,email,createdAt);\n\n            try {\n                await userRef.set({\n                    displayName,\n                    email,\n                    createdAt,\n                    ...additionalData\n                })\n            } catch (error) {\n                console.log('error creating user', error.message);\n            }\n    }\n\n    console.log('userRef ',userRef);\n    console.log('snapShot ',snapShot);\n    return userRef;\n}\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd)=>{\n\n    const collectionRef = firestore.collection(collectionKey);\n    // collectionRef.add(objectsToAdd);\n    const batch  = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n        batch.set(newDocRef,obj);\n    })\n   return await batch.commit();\n   \n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account'});\n\nexport const  signInWithGoogle = ()=> auth.signInWithPopup(provider);\n\n\n\nexport default firebase;\n\n  "]},"metadata":{},"sourceType":"module"}