{"ast":null,"code":"import { take, takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.util';\nimport { signInSuccess, signInFailure, setCurrentUser, signUpStart, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure, checkUserSession } from './user.action';\nimport { emptyCart } from '../cart/cart.actions';\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    googleProvider.setCustomParameters({\n      prompt: 'select_account'\n    });\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail(emailAndPassword) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(emailAndPassword.payload.email, emailAndPassword.payload.password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess()); //yield put(emptyCart());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp(user) {\n  debugger;\n  console.log(user);\n  const {\n    email,\n    password\n  } = user.payload;\n\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    console.log(user);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signUpSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    console.log(error.message);\n    put(signUpFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onSignOut() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUp() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onSignOut), call(onSignUp), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/dzgygmdhx/work/react-course/ecloth/src/redux/user/user.sagas.js"],"names":["take","takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","setCurrentUser","signUpStart","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","checkUserSession","emptyCart","getSnapShotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","setCustomParameters","prompt","user","signInWithPopup","signInWithEmail","emailAndPassword","signInWithEmailAndPassword","payload","email","password","signOut","signUp","console","log","createUserWithEmailAndPassword","message","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onSignOut","SIGN_OUT_START","onSignUp","SIGN_UP_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"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","sourcesContent":["import {take,takeLatest ,put ,all ,call } from 'redux-saga/effects';\nimport  {UserActionTypes} from './user.types';\nimport {auth, googleProvider , createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.util';\nimport { signInSuccess,\n         signInFailure, \n         setCurrentUser ,\n         signUpStart,\n         signOutSuccess,\n         signOutFailure,\n      signUpSuccess,\n      signUpFailure,\n      checkUserSession\n    } from './user.action';\n\nimport { emptyCart}from '../cart/cart.actions';    \n\n    export function* getSnapShotFromUserAuth(userAuth){\n        try{\n          const userRef = yield call(createUserProfileDocument,userAuth);\n          const userSnapshot = yield userRef.get();\n          yield put(signInSuccess({\n               id:userSnapshot.id, ...userSnapshot.data()}));\n        } catch (error) {\n           yield put(signInFailure(error));\n        }\n    }\n\nexport function* signInWithGoogle () {\n    try {   \n        googleProvider.setCustomParameters({ prompt: 'select_account'});\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapShotFromUserAuth(user);\n    } catch (error) {\n       yield put(signInFailure(error))\n    }\n}\n\n\nexport function* signInWithEmail(emailAndPassword){\n    try {\n        const {user} = yield auth.signInWithEmailAndPassword(emailAndPassword.payload.email,emailAndPassword.payload.password);\n        yield getSnapShotFromUserAuth(user);\n    } catch (error) {\n        yield put(signInFailure(error))\n    }       \n}\n\nexport function* signOut(){\n    try {\n        yield auth.signOut();\n      yield  put(signOutSuccess());\n      //yield put(emptyCart());\n    } catch (error) {\n      yield  put(signOutFailure(error))\n    }\n\n    \n}\n\n\nexport function* signUp(user){\n    \n    debugger;\n    console.log(user);\n    const{email,password} = user.payload;\n    try {\n        const {user} = yield auth.createUserWithEmailAndPassword(email,password);\n        console.log(user);\n        const userRef = yield call(createUserProfileDocument,user);\n        const userSnapshot = yield userRef.get();\n        yield put(signUpSuccess({\n            id:userSnapshot.id,\n            ...userSnapshot.data()\n        }))\n    } catch (error) {\n        console.log(error.message);\n        put(signUpFailure(error));\n    }\n}\n\nexport function* isUserAuthenticated(){\n\n     try {\n        const userAuth =  yield getCurrentUser();\n        if(!userAuth)return;\n        yield getSnapShotFromUserAuth(userAuth);\n     } catch (error) {\n        put(signInFailure(error));\n     }\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle);\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail);\n}\n\nexport function* onSignOut(){\n    yield takeLatest(UserActionTypes.SIGN_OUT_START,signOut);\n}\nexport function* onSignUp(){\n    yield takeLatest(UserActionTypes.SIGN_UP_START,signUp);\n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated);\n}\n\nexport function* userSagas(){\n   yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onSignOut),\n        call(onSignUp),\n        call(onCheckUserSession)\n    ]);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}