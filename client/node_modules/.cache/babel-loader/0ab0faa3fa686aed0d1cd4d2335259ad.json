{"ast":null,"code":"import { take, takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.util';\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from './user.action';\nexport function* signInWithGoogle() {\n  try {\n    googleProvider.setCustomParameters({\n      prompt: 'select_account'\n    });\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n} // event.preventDefault();\n// const {email,password} = this.state;\n// auth.signInWithEmailAndPassword(email,password)\n// .then(()=>{\n//     this.setState({email:'',password:''});\n//     this.props.history.push('/');\n// })\n// .catch(e=>console.log(e));\n\nexport function* signInWithEmail(emailAndPassword) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(emailAndPassword.email, emailAndPassword.password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart(emailAndPassword) {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail(emailAndPassword));\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/dzgygmdhx/work/react-course/ecloth/src/redux/user/user.sagas.js"],"names":["take","takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","signInWithGoogle","setCustomParameters","prompt","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","signInWithEmail","emailAndPassword","signInWithEmailAndPassword","email","password","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAAQA,IAAR,EAAaC,UAAb,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,QAA+C,oBAA/C;AACA,SAASC,eAAT,QAA+B,cAA/B;AACA,SAAQC,IAAR,EAAcC,cAAd,EAA+BC,yBAA/B,QAAgE,8BAAhE;AACA,SAAQC,mBAAR,EAA6BC,mBAA7B,EAAkDC,kBAAlD,EAAsEC,kBAAtE,QAAgG,eAAhG;AAGA,OAAO,UAAUC,gBAAV,GAA8B;AACjC,MAAI;AACAN,IAAAA,cAAc,CAACO,mBAAf,CAAmC;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAnC;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMV,IAAI,CAACW,eAAL,CAAqBV,cAArB,CAAvB;AACA,UAAMW,OAAO,GAAG,MAAMd,IAAI,CAACI,yBAAD,EAA2BQ,IAA3B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AAED,UAAMlB,GAAG,CAACO,mBAAmB,CAAC;AACzBY,MAAAA,EAAE,EAACF,YAAY,CAACE,EADS;AACL,SAAGF,YAAY,CAACG,IAAb;AADE,KAAD,CAApB,CAAT;AAID,GAVD,CAUE,OAAOC,KAAP,EAAc;AACb,UAAMrB,GAAG,CAACQ,mBAAmB,CAACa,KAAD,CAApB,CAAT;AACF;AACJ,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,UAAUC,eAAV,CAA0BC,gBAA1B,EAA2C;AAE9C,MAAI;AAEA,UAAM;AAACT,MAAAA;AAAD,QAAS,MAAMV,IAAI,CAACoB,0BAAL,CAAgCD,gBAAgB,CAACE,KAAjD,EAAuDF,gBAAgB,CAACG,QAAxE,CAArB;AACA,UAAMV,OAAO,GAAG,MAAMd,IAAI,CAACI,yBAAD,EAA2BQ,IAA3B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AAEA,UAAMlB,GAAG,CAACS,kBAAkB,CAAC;AACzBU,MAAAA,EAAE,EAACF,YAAY,CAACE,EADS;AACN,SAAGF,YAAY,CAACG,IAAb;AADG,KAAD,CAAnB,CAAT;AAIH,GAVD,CAUE,OAAOC,KAAP,EAAc;AACZ,UAAMrB,GAAG,CAACU,kBAAkB,CAACW,KAAD,CAAnB,CAAT;AACH;AACJ;AAED,OAAO,UAAUM,mBAAV,GAA+B;AAClC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,oBAAjB,EAAsCjB,gBAAtC,CAAhB;AACH;AAED,OAAO,UAAUkB,kBAAV,CAA6BN,gBAA7B,EAA8C;AACjD,QAAMxB,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAqCR,eAAe,CAACC,gBAAD,CAApD,CAAhB;AACH;AAED,OAAO,UAAUQ,SAAV,GAAqB;AACzB,QAAM9B,GAAG,CAAC,CACNC,IAAI,CAACyB,mBAAD,CADE,EAELzB,IAAI,CAAC2B,kBAAD,CAFC,CAAD,CAAT;AAIF","sourcesContent":["import {take,takeLatest ,put ,all ,call } from 'redux-saga/effects';\nimport  {UserActionTypes} from './user.types';\nimport {auth, googleProvider , createUserProfileDocument } from '../../firebase/firebase.util';\nimport {googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from './user.action';\n\n\nexport function* signInWithGoogle () {\n    try {   \n        googleProvider.setCustomParameters({ prompt: 'select_account'});\n       const { user } = yield auth.signInWithPopup(googleProvider);\n       const userRef = yield call(createUserProfileDocument,user);\n       const userSnapshot = yield userRef.get();\n\n      yield put(googleSignInSuccess({\n           id:userSnapshot.id, ...userSnapshot.data()\n       }));\n\n    } catch (error) {\n       yield put(googleSignInFailure(error))\n    }\n}\n\n// event.preventDefault();\n// const {email,password} = this.state;\n// auth.signInWithEmailAndPassword(email,password)\n// .then(()=>{\n//     this.setState({email:'',password:''});\n//     this.props.history.push('/');\n// })\n// .catch(e=>console.log(e));\n\nexport function* signInWithEmail(emailAndPassword){\n\n    try {\n\n        const {user} = yield auth.signInWithEmailAndPassword(emailAndPassword.email,emailAndPassword.password);\n        const userRef = yield call(createUserProfileDocument,user);\n        const userSnapshot = yield userRef.get();\n        \n        yield put(emailSignInSuccess({\n            id:userSnapshot.id,...userSnapshot.data()\n        }));\n\n    } catch (error) {\n        yield put(emailSignInFailure(error));\n    }\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle);\n}\n\nexport function* onEmailSignInStart(emailAndPassword){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail(emailAndPassword));\n}\n\nexport function* userSagas(){\n   yield all([\n       call(onGoogleSignInStart),\n        call(onEmailSignInStart)\n    ]);\n}\n\n\n"]},"metadata":{},"sourceType":"module"}